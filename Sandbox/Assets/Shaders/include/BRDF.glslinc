#ifndef _BRDF___GLSL_
#define _BRDF___GLSL_
#ifndef PI
#define PI 3.1415926536
#endif

float D_GGX(float NoH, float NxH2, float alpha)
{
	float alpha2 = alpha * alpha;
	float NoH2 = NoH * NoH;
	float denom = NxH2 + alpha2 * NoH2;
	float res = alpha2/(PI * denom * denom);
	return res;
}

float V_SmithGGXCorrelated(float NoV, float NoL, float roughness) {
    float a2 = roughness * roughness;
    float GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
    float GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
    return 0.5 / (GGXV + GGXL);
}

float V_SmithGGXCorrelatedFast(float NoV, float NoL, float roughness) {
    float a = roughness;
    float GGXV = NoL * (NoV * (1.0 - a) + a);
    float GGXL = NoV * (NoL * (1.0 - a) + a);
    return 0.5 / (GGXV + GGXL);
}

float V_SmithApproximation(float NoV, float NoL, float alpha)
{
	float denom = mix(2.0*NoL*NoV, NoL+NoV, alpha);
	return 0.5/denom;
}

float V_Kelemen(float LoH)
{
	return 0.25 / (LoH * LoH);
}

vec3 F_Schlick(float VoH, vec3 F0)
{
	float Fc = pow(1.0 - VoH, 5.0);
	return F0 + (vec3(1.0) - F0) * Fc;
}

//Specular BRDF
//Normalized input
vec3 Fr_Std(vec3 N,vec3 V,vec3 L, float alpha, vec3 F0)
{
	vec3 H = (V + L) / length(V + L);
	vec3 NxH = cross(N, H);
	float NoH = dot(N, H);
	float NoV = dot(N, V);
	float NoL = dot(N, L);
	float VoH = dot(V,H);
	float NxH2 = NxH.x*NxH.x + NxH.y*NxH.y + NxH.z*NxH.z;
	float D = D_GGX(NoH, NxH2, alpha);
	float Vis = V_SmithApproximation(NoV, NoL, alpha);
	vec3 F = F_Schlick(VoH, F0);
	return D * Vis * F;
}

//ClearCoat Specular BRDF 
//Normalized input
vec3 Fr_Cc(vec3 N,vec3 V,vec3 L, float alpha, out vec3 F0c)
{
	vec3 H = (V + L) / length(V + L);
	vec3 NxH = cross(N, H);
	vec3 F0 = vec3(0.04);
	float NoH = dot(N, H);
	float VoH = dot(V, H);
	float LoH = dot(L, H);
	float NxH2 = NxH.x*NxH.x + NxH.y*NxH.y + NxH.z*NxH.z;
	float D = D_GGX(NoH, NxH2, alpha);
	F0c = F_Schlick(VoH, F0);
	float Viscc = V_Kelemen(LoH);
	return D * F0c * Viscc;
}

//Diffuse BRDF
vec3 Fd(vec3 rho)
{
	return rho/PI;
}

//BRDF without clearcoat
//Normalized input
vec3 BRDF_Std(vec3 N, vec3 V, vec3 L, vec3 baseColor, float roughness, float reflectance, float matallic)
{
	float alpha = clamp(roughness * roughness , 0.001, 1.0);
	vec3 F0 = mix(vec3(0.16)*reflectance*reflectance, baseColor, matallic);
	vec3 rho = mix(baseColor, vec3(0.0), matallic);
	return Fr_Std(N, V, L, alpha, F0) + Fd(rho);
}

//BRDF with clearcoat
//Normalized input
vec3 BRDF_Cc(vec3 N, vec3 V, vec3 L, vec3 baseColor, float roughness, float reflectance, float matallic, float clearCoat, float clearCoatPerceptualRoughness)
{
	float alpha = clamp(roughness * roughness , 0.001, 1.0);
	vec3 F0 = mix(vec3(0.16)*reflectance*reflectance, baseColor, matallic);
	vec3 rho = mix(baseColor, vec3(0.0), matallic);
	vec3 Fc;
	vec3 Frc = Fr_Cc(N, V, L, alpha, Fc);
	return (Fr_Std(N, V, L, alpha, F0)*(vec3(1.0) - Fc) + Fd(rho)) *(vec3(1.0) - Fc) + Frc;
}

#endif /* _BRDF___GLSL_ */
